#lang racket

(require math/number-theory
         racket/flonum
         math/bigfloat)

;(define con_a (fl/ 12 (flexpt 640320 (fl/ 3 2))))


;(define var_a
;  (for/sum ([k (in-range 1)])
;           (/ (* (factorial (* 6 k)) (+ 13591409 (* 545140134 k)))
;              (* (factorial (* 3 k)) (expt (factorial k) 3) (expt -640320 (* 3 k))))))

;(/ 1 (* con_a var_a))
;

(bf-precision 53)
(define b12 (bf 12))
(define b640320 (bf 640320))
(define b3 (bf 3))
(define b2 (bf 3))

(define reslt (
(bf/ b12 (bfexpt b640320 (bf/ b3 b2)))
))

(print (bigfloat->string reslt))

;(define b_1 (bf 1))
;(real->double-flonum 1)
;(print b_1)
